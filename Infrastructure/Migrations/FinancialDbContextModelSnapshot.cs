// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(FinancialDbContext))]
    partial class FinancialDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ApplicationCore.Entities.Clients.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal>("TotalAmountPayable")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("PaymentOrderId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.PaymentOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CanceledReason")
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("DateStatusApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateStatusCanceled")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentOrder", null, t =>
                        {
                            t.Property("Status")
                                .HasColumnName("PaymentOrder_Status");
                        });

                    b.HasDiscriminator<string>("Type").HasValue("PaymentOrder");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.ProductOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductOrder", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Products.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MassMeasure")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(300)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.ValuesObjects.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("varchar(35)");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Country")
                        .HasColumnType("varchar(30)");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Street")
                        .HasColumnType("varchar(35)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.ValuesObjects.IdentityCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("date");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(14)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("IdentityCard", (string)null);
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.Pix", b =>
                {
                    b.HasBaseType("ApplicationCore.Entities.Orders.PaymentOrder");

                    b.ToTable("PaymentOrder", t =>
                        {
                            t.Property("Status")
                                .HasColumnName("PaymentOrder_Status");
                        });

                    b.HasDiscriminator().HasValue("Pix");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Clients.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationCore.Entities.Orders.PaymentOrder", "PaymentOrder")
                        .WithMany()
                        .HasForeignKey("PaymentOrderId");

                    b.Navigation("Client");

                    b.Navigation("PaymentOrder");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.ProductOrder", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Orders.Order", null)
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ApplicationCore.Entities.Products.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ApplicationCore.ValuesObjects.Address", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Clients.Client", null)
                        .WithMany("Addresses")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.ValuesObjects.IdentityCard", b =>
                {
                    b.HasOne("ApplicationCore.Entities.Clients.Client", null)
                        .WithMany("IdentityCards")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.Pix", b =>
                {
                    b.OwnsOne("ApplicationCore.Shared.Pix.PixPayment", "PixPayment", b1 =>
                        {
                            b1.Property<int>("PixId")
                                .HasColumnType("int");

                            b1.Property<string>("Chave")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("Chave");

                            b1.Property<string>("Location")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("Location");

                            b1.Property<int>("Revisao")
                                .HasColumnType("int")
                                .HasColumnName("Revisao");

                            b1.Property<string>("SolicitacaoPagador")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("SolicitacaoPagador");

                            b1.Property<string>("Status")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("Status");

                            b1.Property<string>("Txid")
                                .HasColumnType("varchar(max)")
                                .HasColumnName("Txid");

                            b1.HasKey("PixId");

                            b1.ToTable("PaymentOrder");

                            b1.WithOwner()
                                .HasForeignKey("PixId");

                            b1.OwnsOne("ApplicationCore.Shared.Pix.CalendarioCompleto", "Calendario", b2 =>
                                {
                                    b2.Property<int>("PixPaymentPixId")
                                        .HasColumnType("int");

                                    b2.Property<DateTime>("Criacao")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("CalendarioCriacao");

                                    b2.Property<int>("Expiracao")
                                        .HasColumnType("int")
                                        .HasColumnName("CalendarioExpiracao");

                                    b2.HasKey("PixPaymentPixId");

                                    b2.ToTable("PaymentOrder");

                                    b2.WithOwner()
                                        .HasForeignKey("PixPaymentPixId");
                                });

                            b1.OwnsOne("ApplicationCore.Shared.Pix.Devedor", "Devedor", b2 =>
                                {
                                    b2.Property<int>("PixPaymentPixId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Cpf")
                                        .HasColumnType("varchar(11)")
                                        .HasColumnName("DevedorCpf");

                                    b2.Property<string>("Nome")
                                        .HasColumnType("varchar(max)")
                                        .HasColumnName("DevedorNome");

                                    b2.HasKey("PixPaymentPixId");

                                    b2.ToTable("PaymentOrder");

                                    b2.WithOwner()
                                        .HasForeignKey("PixPaymentPixId");
                                });

                            b1.OwnsOne("ApplicationCore.Shared.Pix.Loc", "Loc", b2 =>
                                {
                                    b2.Property<int>("PixPaymentPixId")
                                        .HasColumnType("int");

                                    b2.Property<DateTime>("Criacao")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("LocCriacao");

                                    b2.Property<int>("Id")
                                        .HasColumnType("int")
                                        .HasColumnName("LocId");

                                    b2.Property<string>("Location")
                                        .HasColumnType("varchar(max)")
                                        .HasColumnName("LocLocation");

                                    b2.Property<string>("TipoCob")
                                        .HasColumnType("varchar(max)")
                                        .HasColumnName("LocTipoCob");

                                    b2.HasKey("PixPaymentPixId");

                                    b2.ToTable("PaymentOrder");

                                    b2.WithOwner()
                                        .HasForeignKey("PixPaymentPixId");
                                });

                            b1.OwnsOne("ApplicationCore.Shared.Pix.Valor", "Valor", b2 =>
                                {
                                    b2.Property<int>("PixPaymentPixId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Original")
                                        .HasColumnType("varchar(max)")
                                        .HasColumnName("ValorOriginal");

                                    b2.HasKey("PixPaymentPixId");

                                    b2.ToTable("PaymentOrder");

                                    b2.WithOwner()
                                        .HasForeignKey("PixPaymentPixId");
                                });

                            b1.Navigation("Calendario");

                            b1.Navigation("Devedor");

                            b1.Navigation("Loc");

                            b1.Navigation("Valor");
                        });

                    b.Navigation("PixPayment");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Clients.Client", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("IdentityCards");
                });

            modelBuilder.Entity("ApplicationCore.Entities.Orders.Order", b =>
                {
                    b.Navigation("ProductOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
